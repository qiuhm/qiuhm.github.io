<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Test-tools | qiuhm's blog]]></title>
  <link href="http://qiuhm.github.io/blog/categories/test-tools/atom.xml" rel="self"/>
  <link href="http://qiuhm.github.io/"/>
  <updated>2016-04-28T19:00:27+08:00</updated>
  <id>http://qiuhm.github.io/</id>
  <author>
    <name><![CDATA[qiuhm]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[本地编译oclint包]]></title>
    <link href="http://qiuhm.github.io/blog/2016/04/28/how-to-build-oclint/"/>
    <updated>2016-04-28T17:59:42+08:00</updated>
    <id>http://qiuhm.github.io/blog/2016/04/28/how-to-build-oclint</id>
    <content type="html"><![CDATA[<p>进行自定义规则开发，必须在本地编译oclint的release包或debug包。</p>

<h3>1、 编译release包</h3>

<ul>
<li>进入checkout的oclint目录，再进入到oclint-scripts目录</li>
<li>执行<code>make</code></li>
</ul>


<h3>2、编译debug包</h3>

<ul>
<li>进入checkout的oclint目录，再进入到oclint-scripts目录</li>
<li>执行<code>./ci -reset</code></li>
<li>再执行<code>./ci -setup -release</code></li>
</ul>


<h3>3、编译后的包位置</h3>

<p>${oclint-home}/build/oclint-release <br>
<img src="../blogpic/oclint/oclint-release-location.png" alt="如图" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oclint本地开发环境搭建]]></title>
    <link href="http://qiuhm.github.io/blog/2016/04/28/oclint-develop-enviroment/"/>
    <updated>2016-04-28T14:49:01+08:00</updated>
    <id>http://qiuhm.github.io/blog/2016/04/28/oclint-develop-enviroment</id>
    <content type="html"><![CDATA[<h3>环境安装</h3>

<p><a href="http://docs.oclint.org/en/stable/devel/requirements.html">需要安装的软件</a></p>

<h3>checkout代码</h3>

<ul>
<li>oclint/oclint</li>
<li>oclint/oclint-json-compilation-database</li>
<li>oclint/oclint-xcodebuild</li>
<li>llvm/clang</li>
<li>googletest/googlemock<br>
<a href="http://docs.oclint.org/en/stable/devel/checkout.html">详细安装文档</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何处理oclint的warning误报]]></title>
    <link href="http://qiuhm.github.io/blog/2016/01/22/ru-he-chu-li-oclintde-warningwu-bao/"/>
    <updated>2016-01-22T17:50:29+08:00</updated>
    <id>http://qiuhm.github.io/blog/2016/01/22/ru-he-chu-li-oclintde-warningwu-bao</id>
    <content type="html"><![CDATA[<p>用过静态扫描工具的都知道，在扫描工程时存在误报，比如未使用的参数，但有时iOS的默认写法即如此，那怎么处理呢？</br>方法如下：</p>

<h3>一、在误报的行后面添加注释!OCLINT（推荐）</h3>

<p>比如：
<code>
void a() {
    int unusedLocalVariable; //!OCLINT
}
</code>
但建议在注释里加下详细说明，为什么要忽略？</br>
推荐写法:
<code>
void a() {
    int unusedLocalVariable; //!OCLINT(the reason)
}
</code></p>

<h3>二、添加注解</h3>

<p>添加单条注解，忽略单条规则：
<code>
__attribute__((annotate("oclint:suppress[unused method parameter]")))
</code>
添加多条注解，忽略多条规则：
<code>
__attribute__((annotate("oclint:suppress[high cyclomatic complexity]"), annotate("oclint:suppress[high npath complexity]"), annotate("oclint:suppress[high ncss method]")))
</code>
忽略所有规则：
<code>
__attribute__((annotate("oclint:suppress")))
</code>
示例：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bool &lt;strong&gt;attribute&lt;/strong&gt;((annotate(&ldquo;oclint:suppress&rdquo;))) aMethod(int aParameter)
</span><span class='line'>{
</span><span class='line'>    // 忽略整个方法的所有规则的warning
</span><span class='line'>    // like unused aParameter variable and empty if statement
</span><span class='line'>    if (1) {}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;return true;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;(IBAction)turnoverValueChanged:
</span><span class='line'>  (id) &lt;strong&gt;attribute&lt;/strong&gt;((annotate(&ldquo;oclint:suppress[unused method parameter]&rdquo;))) sender
</span><span class='line'>  // 忽略sender可能未使用
</span><span class='line'>{
</span><span class='line'>  int i; // won&rsquo;t suppress this one
</span><span class='line'>  [self calculateTurnover];
</span><span class='line'>}&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;(void)dismissAllViews:(id)currentView parentView:(id)parentView
</span><span class='line'> &lt;strong&gt;attribute&lt;/strong&gt;((annotate(&ldquo;oclint:suppress&rdquo;)))
</span><span class='line'> // 忽略整个方法的所有规则的warning
</span><span class='line'>{
</span><span class='line'>  [self dismissTurnoverView];
</span><span class='line'>  // plus 30+ lines of code of dismissing other views
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oclint嵌入到xcode教程]]></title>
    <link href="http://qiuhm.github.io/blog/2016/01/16/oclintqian-ru-dao-xcodejiao-cheng/"/>
    <updated>2016-01-16T12:01:27+08:00</updated>
    <id>http://qiuhm.github.io/blog/2016/01/16/oclintqian-ru-dao-xcodejiao-cheng</id>
    <content type="html"><![CDATA[<p>前一篇讲了oclint的安装及配置，现在要将oclint运用到实际的项目中，平时iOS开发和测试跟xcode打交道最多，so如何将oclint运用到xcode IDE中呢？</p>

<h3>环境准备</h3>

<p>1、oclint已安装配置<br>
2、xcode已安装<br>
3、xcode commandLine已安装</p>

<h3>开始嵌入xcode</h3>

<p>1、在工程中新建一个target(比如取名为OCLint)，类型为Aggregate<br>
<img src="https://raw.githubusercontent.com/qiuhm/Resource/master/blogpic/oclint/newTarget.png" alt="新建类型为Aggregate的target" /><br></p>

<!-- more -->


<p>2、在该target->Build Phases里新建脚本<br>
<img src="https://raw.githubusercontent.com/qiuhm/Resource/master/blogpic/oclint/newPhase.png" alt="新建script" /><br>
3、编辑脚本如下<br></p>

<pre><code>source ~/.bash_profile

echo "******** start check the oclint ********"
hash oclint &amp;&gt; /dev/null
if [ $? -eq 1 ]; then
echo &gt;&amp;2 "oclint not found, analyzing stopped"
exit 1
fi
echo "******** end check the oclint ********"
echo "******** start clean the environment ********"
cd ${SRCROOT}
rm -rf **/compile_commands.json
rm -rf **/oclint.xml
xctool -scheme ${PROJECT_NAME} clean
echo "******** end clean the environment ********"

echo "******** start building ********"
xctool \
-project ${PROJECT_NAME}.xcodeproj  \
-scheme ${PROJECT_NAME} \
-reporter json-compilation-database:compile_commands.json \
build
echo "******** end building ********"

echo "******** start analyzing ********"
oclint-json-compilation-database -- -report-type xcode
echo "******** end analyzing ********"
</code></pre>

<p>4、切换scheme到刚才新建的这个target，按快捷键（command+B），开始编译<br>
<img src="https://raw.githubusercontent.com/qiuhm/Resource/master/blogpic/oclint/warning.png" alt="扫描出的警告" /><br></p>

<h3>附录</h3>

<p><a href="OCLintDemo">https://github.com/qiuhm/OCLintDemo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OCLint(静态扫描工具)介绍]]></title>
    <link href="http://qiuhm.github.io/blog/2016/01/14/oclint-jing-tai-sao-miao-gong-ju-jie-shao/"/>
    <updated>2016-01-14T12:47:57+08:00</updated>
    <id>http://qiuhm.github.io/blog/2016/01/14/oclint-jing-tai-sao-miao-gong-ju-jie-shao</id>
    <content type="html"><![CDATA[<h3>一、OCLint是什么</h3>

<p>  OCLint是一款静态扫描工具，可以扫描C,C++,OC。扫描出的主要问题包括：<br>
空的if/else/try/catch/finally 语句<br>
未使用的代码，包括未使用的局部变量、传参<br>
复杂的代码<br>
switch语句里break未加 等<br></p>

<h3>二、 OCLint安装</h3>

<h4>1.下载编译包</h4>

<p>附上下载
<a href="https://github.com/oclint/oclint/releases">OCLint官方包</a>、
<a href="https://raw.githubusercontent.com/qiuhm/Resource/master/download/oclint.zip">本人整理后的包，筛选了自定义规则</a><br>
下载后解压存到某个文件夹，我是放到~/libtool,所以我的OCLINT_HOME为~/libtool/oclint</p>

<h4>2.配置环境变量</h4>

<p>修改~/.bash_profile(或/etc/profile)文件（如无,可创建一个）,添加如下脚本<br>
OCLINT_HOME=~/libtool/oclint<br>
PATH=$OCLINT_HOME/bin:$PATH</p>

<h4>3.配置ocLint配置文件（非必须）</h4>

<h5>a.全局配置文件</h5>

<p>该文件存储在<code>$(/path/to/bin/oclint)/../etc/oclint</code>，对整个系统生效，由于我的oclint路径为<code>~/libtool/oclint/bin/oclint</code>,则我的全局oclint文件路径为<code>~/libtool/oclint/bin/etc/oclint</code></p>

<h5>b.用户配置文件</h5>

<p>新建.oclint文件，存于～目录下，该配置文件对该用户生效</p>

<h5>c.项目级配置文件</h5>

<p>新建oclint文件，放在project的主目录</p>

<h5>d.配置文件优先级</h5>

<p>项目级配置文件>用户配置文件>全局配置文件</p>

<!-- more -->


<h3>三、OCLint安装目录解析</h3>

<p>oclint<br>
|-bin<br>
|-lib<br>
|&mdash;clang<br>
|&mdash;&ndash;3.7.0<br>
|&mdash;&mdash;-include<br>
|&mdash;&mdash;-lib<br>
|&mdash;oclint<br>
|&mdash;&ndash;rules #oclint默认的规则目录<br>
|&mdash;&ndash;customRules  #我配置的自定义规则文件夹<br>
|&mdash;&ndash;reporters</p>

<h3>四、OCLint使用</h3>

<h4>1、OCLint直接嵌入xcode工程</h4>

<p><a href="http://qiuhm.github.io/blog/2016/01/16/oclintqian-ru-dao-xcodejiao-cheng/">OCLint嵌入到Xcode IDE</a></p>

<h4>2、OCLint接入jenkins持续集成</h4>

<p>（未完待续）</p>

<h4>3、OCLint配置文件解析</h4>

<p>（未完待续）</p>

<h4>4、OCLint规则解析</h4>

<p>（未完待续）</p>
]]></content>
  </entry>
  
</feed>
