<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[qiuhm blog]]></title>
  <link href="http://qiuhm.github.io/atom.xml" rel="self"/>
  <link href="http://qiuhm.github.io/"/>
  <updated>2016-01-16T16:29:58+08:00</updated>
  <id>http://qiuhm.github.io/</id>
  <author>
    <name><![CDATA[qiuhm]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Oclint嵌入到xcode教程]]></title>
    <link href="http://qiuhm.github.io/blog/2016/01/16/oclintqian-ru-dao-xcodejiao-cheng/"/>
    <updated>2016-01-16T12:01:27+08:00</updated>
    <id>http://qiuhm.github.io/blog/2016/01/16/oclintqian-ru-dao-xcodejiao-cheng</id>
    <content type="html"><![CDATA[<p>前一篇讲了oclint的安装及配置，现在要将oclint运用到实际的项目中，平时iOS开发和测试跟xcode打交道最多，so如何将oclint运用到xcode IDE中呢？</p>

<h3>环境准备</h3>

<p>1、oclint已安装配置<br>
2、xcode已安装<br>
3、xcode commandLine已安装</p>

<h3>开始嵌入xcode</h3>

<p>1、在工程中新建一个target(比如取名为OCLint)，类型为Aggregate<br>
<img src="https://github.com/qiuhm/Resource/blob/master/blogpic/oclint/newTarget.png" alt="新建类型为Aggregate的target" /><br>
2、在该target->Build Phases里新建脚本<br>
<img src="https://github.com/qiuhm/Resource/blob/master/blogpic/oclint/newPhase.png" alt="新建script" /><br>
3、编辑脚本如下<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source ~/.bash_profile
</span><span class='line'>
</span><span class='line'>echo "******** start check the oclint ********"
</span><span class='line'>hash oclint &&gt; /dev/null
</span><span class='line'>if [ $? -eq 1 ]; then
</span><span class='line'>echo &gt;&2 "oclint not found, analyzing stopped"
</span><span class='line'>exit 1
</span><span class='line'>fi
</span><span class='line'>echo "******** end check the oclint ********"
</span><span class='line'>echo "******** start clean the environment ********"
</span><span class='line'>cd ${SRCROOT}
</span><span class='line'>rm -rf **/compile_commands.json
</span><span class='line'>rm -rf **/oclint.xml
</span><span class='line'>xctool -scheme ${PROJECT_NAME} clean
</span><span class='line'>echo "******** end clean the environment ********"
</span><span class='line'>
</span><span class='line'>echo "******** start building ********"
</span><span class='line'>xctool \
</span><span class='line'>-project ${PROJECT_NAME}.xcodeproj  \
</span><span class='line'>-scheme ${PROJECT_NAME} \
</span><span class='line'>-reporter json-compilation-database:compile_commands.json \
</span><span class='line'>build
</span><span class='line'>echo "******** end building ********"
</span><span class='line'>
</span><span class='line'>echo "******** start analyzing ********"
</span><span class='line'>oclint-json-compilation-database -- -report-type xcode
</span><span class='line'>echo "******** end analyzing ********"</span></code></pre></td></tr></table></div></figure>


<p>4、切换scheme到刚才新建的这个target，按快捷键（command+B），开始编译<br>
<img src="https://github.com/qiuhm/Resource/blob/master//blogpic/oclint/warning.png" alt="扫描出的警告" /><br></p>

<h3>附录</h3>

<p><a href="OCLintDemo">https://github.com/qiuhm/OCLintDemo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OCLint(静态扫描工具)介绍]]></title>
    <link href="http://qiuhm.github.io/blog/2016/01/14/oclint-jing-tai-sao-miao-gong-ju-jie-shao/"/>
    <updated>2016-01-14T12:47:57+08:00</updated>
    <id>http://qiuhm.github.io/blog/2016/01/14/oclint-jing-tai-sao-miao-gong-ju-jie-shao</id>
    <content type="html"><![CDATA[<h3>一、OCLint是什么</h3>

<p>  OCLint是一款静态扫描工具，可以扫描C,C++,OC。扫描出的主要问题包括：<br>
空的if/else/try/catch/finally 语句<br>
未使用的代码，包括未使用的局部变量、传参<br>
复杂的代码<br>
switch语句里break未加 等<br></p>

<h3>二、 OCLint安装</h3>

<h4>1.下载编译包</h4>

<p>附上下载
<a href="https://github.com/oclint/oclint/releases">OCLint官方包</a>、
<a href="https://github.com/qiuhm/Resource/blob/master/download/oclint.zip">本人整理后的包，筛选了自定义规则</a><br>
下载后解压存到某个文件夹，我是放到~/libtool,所以我的OCLINT_HOME为~/libtool/oclint</p>

<h4>2.配置环境变量</h4>

<p>修改~/.bash_profile(或/etc/profile)文件（如无,可创建一个）,添加如下脚本<br>
OCLINT_HOME=~/libtool/oclint<br>
PATH=$OCLINT_HOME/bin:$PATH</p>

<h4>3.配置ocLint配置文件（非必须）</h4>

<h5>a.全局配置文件</h5>

<p>该文件存储在<code>$(/path/to/bin/oclint)/../etc/oclint</code>，对整个系统生效，由于我的oclint路径为<code>~/libtool/oclint/bin/oclint</code>,则我的全局oclint文件路径为<code>~/libtool/oclint/bin/etc/oclint</code></p>

<h5>b.用户配置文件</h5>

<p>新建.oclint文件，存于～目录下，该配置文件对该用户生效</p>

<h5>c.项目级配置文件</h5>

<p>新建oclint文件，放在project的主目录</p>

<h5>d.配置文件优先级</h5>

<p>项目级配置文件>用户配置文件>全局配置文件</p>

<h3>三、OCLint安装目录解析</h3>

<p>oclint<br>
|-bin<br>
|-lib<br>
|&mdash;clang<br>
|&mdash;&ndash;3.7.0<br>
|&mdash;&mdash;-include<br>
|&mdash;&mdash;-lib<br>
|&mdash;oclint<br>
|&mdash;&ndash;rules #oclint默认的规则目录<br>
|&mdash;&ndash;customRules  #我配置的自定义规则文件夹<br>
|&mdash;&ndash;reporters</p>

<h3>四、OCLint使用</h3>

<h4>1、OCLint直接嵌入xcode工程</h4>

<p><img src="http://qiuhm.github.io/blog/2016/01/16/oclintqian-ru-dao-xcodejiao-cheng/" alt="OCLint嵌入到Xcode IDE" /></p>

<h4>2、OCLint接入jenkins持续集成</h4>

<p>（未完待续）</p>

<h4>3、OCLint配置文件解析</h4>

<p>（未完待续）</p>

<h4>4、OCLint规则解析</h4>

<p>（未完待续）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用facebook/infer工具扫描oc代码]]></title>
    <link href="http://qiuhm.github.io/blog/2015/12/31/li-yong-facebook-slash-infergong-ju-sao-miao-ocdai-ma/"/>
    <updated>2015-12-31T17:52:53+08:00</updated>
    <id>http://qiuhm.github.io/blog/2015/12/31/li-yong-facebook-slash-infergong-ju-sao-miao-ocdai-ma</id>
    <content type="html"><![CDATA[<blockquote><p>最近在研究facebook的开源工具infer，它是一个静态扫描工具，可以分析 Objective-C， Java 或者 C 代码，我按照官方说明在本地进行了安装，遇到了很多环境的问题，把安装说明详细的记录下来，供大家参考。</p>

<h3>一、安装依赖</h3>

<p>需要安装如下依赖：</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- opam &gt;= 1.2.0 
</span><span class='line'>- Python 2.7
</span><span class='line'>- Java (only needed for the Java analysis)
</span><span class='line'>- clang in Xcode command line tools. You can install them with the command：xcode-select --install
</span><span class='line'>(only needed for the C/Objective-C analysis)
</span><span class='line'>- Xcode &gt;= 6.1 (only needed for the C/Objective-C analysis)
</span><span class='line'>- autoconf &gt;= 2.63 and automake &gt;= 1.11.1 (if building from git)</span></code></pre></td></tr></table></div></figure>


<blockquote><p>我是macx os环境，基本是用homebrew工具安装依赖的，建议大家使用该工具，省去了一系列配置环境变量的事。</p>

<h3>二、下载安装预编译包</h3>

<h4>1.下载</h4>

<p>该预编译包包含clang and facebook-clang-plugins，减少自己编译clang和facebook-clang-plugins的时间。
<a href="https://github.com/facebook/infer/releases">下载链接</a>
建议下载最新的包，格式为infer-osx-v0.5.0.tar.xz，解压后存到你想要放置的目录（我放在~/libtool）</p>

<h4>2.设置环境变量</h4>

<p>将/~/libtool/infer/infer/bin加到环境变量里</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo vi /etc/profile</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INFER_HOME=/～/libtool/infer/infer
</span><span class='line'>PATH=$INFER_HOME/bin:$PATH</span></code></pre></td></tr></table></div></figure>


<blockquote><p>将~替换成你的主目录路径</p>

<h4>3.build infer</h4></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /～/libtool/infer
</span><span class='line'>./build-infer.sh</span></code></pre></td></tr></table></div></figure>


<blockquote><p>大概等1分钟左右，没有报错的话，则infer安装完成。如果有报错，可能是少了某些依赖，需要根据补全相关的依赖，再重新build infer。</p>

<h3>三、运行example</h3>

<h4>1.分析单个文件</h4></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /～/libtool/infer/examples/ios_hello/HelloWorldApp
</span><span class='line'>infer -- clang -c Hello.m</span></code></pre></td></tr></table></div></figure>


<blockquote><p>执行结果如下：
<img src="https://github.com/qiuhm/Resource/blob/master/blogpic/infer/single.jpg" alt="单个文件的扫描结果" /></p>

<h4>2.分析整个项目（本人做iOS的，以iOS为例）</h4></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /~/libtool/infer/examples/ios_hello
</span><span class='line'>xcodebuild -target HelloWorldApp -configuration Debug -sdk iphonesimulator clean
</span><span class='line'>infer -- xcodebuild -target HelloWorldApp -configuration Debug -sdk iphonesimulator</span></code></pre></td></tr></table></div></figure>


<blockquote><p>执行结果如下：
<img src="https://github.com/qiuhm/Resource/blob/master/blogpic/infer/project.jpg" alt="项目的扫描结果" /></p>

<h3>四、执行inferTraceBugs查看问题</h3>

<p>切换到存在infer-out目录的文件夹，执行</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>inferTraceBugs --html</span></code></pre></td></tr></table></div></figure>


<blockquote><p>点击打开生成的html，大致如图
<img src="https://github.com/qiuhm/Resource/blob/master/blogpic/infer/html.jpg" alt="html报告" /></p>

<p>附录</p>

<blockquote><p>1.<a href="http://fbinfer.com/">infer详细介绍</a>
2.<a href="https://github.com/facebook/infer">facebook/infer源码</a></p></blockquote></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://qiuhm.github.io/blog/2015/12/30/huan-ying-ye/"/>
    <updated>2015-12-30T17:17:36+08:00</updated>
    <id>http://qiuhm.github.io/blog/2015/12/30/huan-ying-ye</id>
    <content type="html"><![CDATA[<p>这是qiuhm的博客，欢迎大家^_^</p>
]]></content>
  </entry>
  
</feed>
